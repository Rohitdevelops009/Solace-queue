Great! Now that you’ve created an internal personal certificate, you can proceed with configuring it to enable **SSL/TLS** for your Oracle SQL Developer connection or for the Oracle server if you are managing it.

Let me guide you through what you can do next depending on the context:

---

### **1. Use Personal Certificate for SQL Developer (Client-Side)**

If you want to use the personal certificate for your **SQL Developer** connection (client-side) for mutual SSL authentication, follow these steps:

#### **Step 1: Convert the Personal Certificate to Java Keystore Format**
SQL Developer relies on the **Java Keystore** format for managing SSL certificates. If your personal certificate is in **.pem** or **.pfx** format, you’ll need to convert it to a **JKS** (Java Keystore) format.

If your certificate is in **`.pfx`** or **`.p12`** format, use the `keytool` utility to import it into a Java Keystore.

- **Example command** to convert a `.p12` certificate to a JKS:

   ```bash
   keytool -importkeystore -srckeystore your_personal_certificate.p12 -srcstoretype PKCS12 -destkeystore your_keystore.jks -deststoretype JKS
   ```

   You’ll be asked to provide passwords for the source and destination keystores. The output will be a `.jks` file.

#### **Step 2: Configure SQL Developer to Use the Personal Certificate**

Now, you can configure SQL Developer to use the personal certificate.

1. Open **SQL Developer** and go to your connection settings.
2. Click on the **"Advanced"** tab.
3. In the **Custom JDBC URL** field, ensure you're using the **TCPS** protocol:

   ```bash
   jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=your-db-hostname)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=your_service_name)))
   ```

4. Add the following **JDBC parameters** under **Advanced** to specify the personal certificate (Java Keystore):

   - **javax.net.ssl.keyStore**: Path to the **keystore** containing your personal certificate.
   
     ```bash
     javax.net.ssl.keyStore=/path/to/your_personal_keystore.jks
     ```

   - **javax.net.ssl.keyStorePassword**: The password for the keystore.

     ```bash
     javax.net.ssl.keyStorePassword=your_keystore_password
     ```

   - **javax.net.ssl.trustStore**: Path to the **truststore** containing the CA certificate (e.g., `tls-ca-bundle.pem` converted to JKS).

     ```bash
     javax.net.ssl.trustStore=/path/to/your_truststore.jks
     ```

   - **javax.net.ssl.trustStorePassword**: The password for the truststore.

     ```bash
     javax.net.ssl.trustStorePassword=your_truststore_password
     ```

5. Click **Test** to verify the connection.

---

### **2. Use the Certificate for Oracle Database (Server-Side)**

If you’re setting up the Oracle database to use your internal personal certificate for **SSL/TLS** on the server-side, here’s how you can configure it:

#### **Step 1: Create or Update Oracle Wallet**
You need to store your internal personal certificate in an **Oracle Wallet** for the Oracle listener to use it for SSL/TLS.

1. **Create or update an Oracle Wallet** using `orapki`:

   ```bash
   orapki wallet create -wallet /path/to/wallet -auto_login
   ```

2. Import your personal certificate into the wallet:

   ```bash
   orapki wallet add -wallet /path/to/wallet -user_cert -cert your_personal_certificate.pem
   ```

3. If applicable, import the **CA certificate** that signed your personal certificate:

   ```bash
   orapki wallet add -wallet /path/to/wallet -trusted_cert -cert tls-ca-bundle.pem
   ```

4. **Verify** the wallet contents to ensure both the personal certificate and CA certificate are included:

   ```bash
   orapki wallet display -wallet /path/to/wallet
   ```

#### **Step 2: Update Listener for SSL/TLS**
Modify the Oracle **listener** to use your new personal certificate.

1. Locate and edit the **`listener.ora`** file (typically found in `$ORACLE_HOME/network/admin`).

2. Add the TCPS entry for the SSL port (usually **2484**):

   ```text
   LISTENER =
     (DESCRIPTION_LIST =
       (DESCRIPTION =
         (ADDRESS = (PROTOCOL = TCP)(HOST = your-db-hostname)(PORT = 1521))   # Standard TCP port
         (ADDRESS = (PROTOCOL = TCPS)(HOST = your-db-hostname)(PORT = 2484))  # SSL/TLS port
       )
     )
   ```

3. Specify the **wallet location** in the `listener.ora`:

   ```text
   WALLET_LOCATION =
     (SOURCE =
       (METHOD = FILE)
       (METHOD_DATA =
         (DIRECTORY = /path/to/wallet)
       )
     )
   ```

4. Add the following **SSL parameters**:

   ```text
   SSL_CLIENT_AUTHENTICATION = TRUE
   ```

   If mutual authentication is required, set **`SSL_CLIENT_AUTHENTICATION`** to `TRUE`. Otherwise, leave it as `FALSE`.

#### **Step 3: Configure `sqlnet.ora`**
Edit the **`sqlnet.ora`** file (usually in the same directory as `listener.ora`).

1. Enable TCPS by adding the following lines:

   ```text
   SQLNET.AUTHENTICATION_SERVICES = (BEQ, TCPS)
   SSL_VERSION = 1.2
   WALLET_LOCATION =
     (SOURCE =
       (METHOD = FILE)
       (METHOD_DATA =
         (DIRECTORY = /path/to/wallet)
       )
     )
   SSL_CLIENT_AUTHENTICATION = TRUE  # Set to TRUE if mutual authentication is needed
   ```

2. Restart the listener after making these changes:

   ```bash
   lsnrctl stop
   lsnrctl start
   ```

#### **Step 4: Test the Configuration**

- Test the SSL/TLS connection from **SQL Developer** or a client by specifying the **TCPS** port and connection string.
  
- You can also use **OpenSSL** to check the connection:

   ```bash
   openssl s_client -connect your-db-hostname:2484 -showcerts
   ```

---

### **Summary**

- **Client-Side (SQL Developer)**: Use your personal certificate by converting it to a **Java Keystore** and configuring SQL Developer to reference it for SSL/TLS connections.
- **Server-Side (Oracle Database)**: Store your personal certificate in an **Oracle Wallet**, update the **listener.ora** and **sqlnet.ora** files to enable SSL/TLS with the appropriate wallet and certificate settings, and restart the listener.

Let me know if you need more details for either scenario!