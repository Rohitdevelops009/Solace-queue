@Test
void testProcessMessage() throws JMSException {
    // Arrange: Create a mock TextMessage
    TextMessage mockMessage = mock(TextMessage.class);
    when(mockMessage.getStringProperty(PositionDistributionUtil.CUSIP)).thenReturn("CUSIP12345");
    when(mockMessage.getText()).thenReturn("Test message content");

    // Spy on the PositionEventListenerService instance
    PositionEventListenerService spyService = Mockito.spy(positionEventListenerService);

    // Mock the messageListener() method to return a mock MessageListener
    MessageListener mockMessageListener = mock(MessageListener.class);
    doReturn(mockMessageListener).when(spyService).messageListner(); 

    // Act: Invoke onMessage through messageListener
    spyService.messageListner().onMessage(mockMessage);

    // Assert: Verify that processMessage was called once
    verify(spyService, times(1)).processMessage(mockMessage);
}

@Test
void testProcessMessage_Exception() throws JMSException {
    // Arrange: Create a mock TextMessage and simulate an exception during message processing
    TextMessage mockMessage = mock(TextMessage.class);
    when(mockMessage.getStringProperty(PositionDistributionUtil.CUSIP)).thenReturn("CUSIP12345");
    when(mockMessage.getText()).thenReturn("Test message content");

    // Spy on the PositionEventListenerService instance
    PositionEventListenerService spyService = Mockito.spy(positionEventListenerService);

    // Act: Invoke processMessage and simulate an exception
    doThrow(new JMSException("Processing failed")).when(spyService).processMessage(mockMessage);

    // Act: Invoke onMessage through messageListener
    spyService.messageListner().onMessage(mockMessage);

    // Assert: Verify that the exception is properly handled by verifying logging or other side effects
    verify(spyService, times(1)).processMessage(mockMessage);
}

@Test
void testMessageListener_OnMessage() throws JMSException {
    // Arrange: Create a mock TextMessage
    TextMessage mockMessage = mock(TextMessage.class);
    when(mockMessage.getStringProperty(PositionDistributionUtil.CUSIP)).thenReturn("CUSIP12345");
    when(mockMessage.getText()).thenReturn("Test message content");

    // Create a mock message listener using Mockito.spy to call the onMessage method
    PositionEventListenerService spyService = Mockito.spy(positionEventListenerService);
    
    // Act: Invoke onMessage using the mocked TextMessage
    spyService.messageListner().onMessage(mockMessage);

    // Assert: Verify that processMessage is called
    verify(spyService, times(1)).processMessage(mockMessage);
}