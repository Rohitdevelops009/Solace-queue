package com.wellsfargo.cat.position.streaming.service;

import com.wellsfargo.cat.position.streaming.config.PositionEventReceiverConfig;
import com.wellsfargo.cat.position.streaming.service.PositionProcessorService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.jms.Message;
import javax.jms.TextMessage;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PositionEventListenerServiceTest {

    @InjectMocks
    private PositionEventListenerService positionEventListenerService;

    @Mock
    private PositionEventReceiverConfig positionEventReceiverConfig;

    @Mock
    private PositionProcessorService positionProcessorService;

    @Mock
    private ExecutorService[] partitionedExecutors;

    @Mock
    private TextMessage textMessage;

    @Mock
    private Message message;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInit() {
        // Act
        positionEventListenerService.init();

        // Assert
        assertNotNull(positionEventListenerService);
    }

    @Test
    void testStopConsumer() throws Exception {
        // Arrange
        positionEventListenerService.subscriber = mock(JmsControlledListener.class);

        // Act
        positionEventListenerService.stopConsumer();

        // Assert
        verify(positionEventListenerService.subscriber).stopConsumer();
    }

    @Test
    void testStopConsumer_Exception() throws Exception {
        // Arrange
        positionEventListenerService.subscriber = mock(JmsControlledListener.class);
        doThrow(new RuntimeException("Subscriber Error")).when(positionEventListenerService.subscriber).stopConsumer();

        // Act & Assert
        assertThrows(Exception.class, positionEventListenerService::stopConsumer);
    }

    @Test
    void testSubscribeOnAppStartup() {
        // Arrange
        when(positionEventReceiverConfig.getPositionEventListnerQueue()).thenReturn("TestQueue");
        JmsControlledListener mockSubscriber = mock(JmsControlledListener.class);
        positionEventListenerService.subscriber = mockSubscriber;

        // Act
        positionEventListenerService.subscribeOnAppStartup();

        // Assert
        verify(mockSubscriber, never()).subscribe(anyString(), any());
        verify(mockSubscriber, never()).startConsumer();
    }

    @Test
    void testExtractMessageProperties() throws Exception {
        // Arrange
        when(message.getPropertyNames()).thenReturn(new java.util.Vector<>(Map.of("key1", "value1").keySet()).elements());
        when(message.getStringProperty("key1")).thenReturn("value1");

        // Act
        Map<String, String> result = positionEventListenerService.extractMessageProperties(message);

        // Assert
        assertEquals(2, result.size()); // 1 property + PROCESSING_START_TIME_EPOCH
        assertEquals("value1", result.get("key1"));
        assertNotNull(result.get("PROCESSING_START_TIME_EPOCH"));
    }

    @Test
    void testMessageListener_OnMessage() throws Exception {
        // Arrange
        when(textMessage.getStringProperty("CUSIP")).thenReturn("TestCusip");
        when(textMessage.getText()).thenReturn("TestMessage");

        int partition = 0;
        ExecutorService mockExecutor = mock(ExecutorService.class);
        partitionedExecutors = new ExecutorService[]{mockExecutor};

        positionEventListenerService.partitionedExecutors = partitionedExecutors;

        // Act
        positionEventListenerService.messageListener().onMessage(textMessage);

        // Assert
        verify(mockExecutor).submit(any(Runnable.class));
    }

    @Test
    void testProcessMessage() throws Exception {
        // Arrange
        when(message.getStringProperty("CUSIP")).thenReturn("TestCusip");
        when(message.getText()).thenReturn("TestMessage");

        Map<String, String> mockProperties = new HashMap<>();
        mockProperties.put("key", "value");
        when(positionEventListenerService.extractMessageProperties(message)).thenReturn(mockProperties);

        // Act
        positionEventListenerService.processMessage(message);

        // Assert
        verify(positionProcessorService).processPosition(anyString(), eq(mockProperties));
    }

    @Test
    void testProcessMessage_Exception() throws Exception {
        // Arrange
        when(message.getStringProperty("CUSIP")).thenReturn("TestCusip");
        when(message.getText()).thenReturn("TestMessage");
        doThrow(new RuntimeException("Processing Error")).when(positionProcessorService).processPosition(anyString(), anyMap());

        // Act & Assert
        assertDoesNotThrow(() -> positionEventListenerService.processMessage(message));
    }
}