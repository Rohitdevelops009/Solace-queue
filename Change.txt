If you're using **Oracle SQL Developer** on your enterprise laptop, it's common not to find the **`listener.ora`**, **`sqlnet.ora`**, and **`tnsnames.ora`** files by default because **SQL Developer** does not require these files for basic functionality. SQL Developer directly connects to the database using a JDBC thin client, which doesn't depend on the traditional Oracle networking configuration files.

However, depending on your enterprise setup, there may be alternative configurations or practices in place. Let's explore the possibilities and solutions based on your situation.

### 1. **SQL Developer Uses JDBC Thin Driver**
Oracle SQL Developer, by default, uses a **JDBC thin client**, which allows it to connect directly to the database without the need for Oracle client installation or these configuration files.

- **JDBC Thin** driver allows you to define connection details (such as host, port, and service name) directly in SQL Developer without needing `tnsnames.ora` or `sqlnet.ora`.
- For SSL/TLS, the **JDBC connection string** will need to be configured appropriately to support `TCPS` (SSL).

If you're setting up **TLS/SSL**, you can still configure SSL settings in **SQL Developer** without needing `tnsnames.ora` and `sqlnet.ora` files. You can specify the connection details directly in SQL Developer's connection settings.

---

### 2. **Enterprise Configuration Practices**

In an **enterprise environment**, there are other possible configurations to be aware of:

- **Centralized Oracle Client Installations**: It's possible that your organization uses **centralized Oracle clients** installed on servers rather than on individual laptops. These clients would be configured with `listener.ora`, `sqlnet.ora`, and `tnsnames.ora` files, and your SQL Developer would connect to those centralized Oracle clients.
  
- **VPN or Proxy Connections**: Many enterprises use **VPNs** or proxies for connecting to internal Oracle databases. This can also affect how connections are routed, and they may handle SSL/TLS on the network layer, rather than relying on SQL Developer's configurations.

- **Pre-configured Database Connections**: Sometimes, enterprises provide pre-configured **SQL Developer connections** via `.xml` files or a shared configuration repository, which could automatically set up secure connections without manual configuration.

---

### 3. **How to Set Up SSL/TLS in SQL Developer Without Oracle Configuration Files**

If you're not using Oracle network files but want to implement **TLS/SSL** in SQL Developer, follow these steps:

#### Step 1: Obtain the CA Certificate
You still need to obtain the **CA certificate** used by your database server to sign its SSL certificate. This certificate will allow SQL Developer to trust the server's identity.

#### Step 2: Import the CA Certificate into Java Truststore
SQL Developer uses the **Java truststore** to manage trusted certificates for secure connections. You'll need to import the CA certificate into the **JDK** that SQL Developer uses.

1. **Find the JDK** location used by SQL Developer:
   - Open SQL Developer and go to `Help > About`.
   - In the `Properties` tab, find the path for **`java.home`**. This will show you where the JDK is installed.

2. **Import the CA Certificate** into the Java truststore using the `keytool` utility:
   ```bash
   keytool -importcert -alias yourCA -file ca-cert.pem -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit
   ```

   Replace `$JAVA_HOME` with the path to the JDK, and `ca-cert.pem` with the location of your CA certificate. The default password for the Java truststore is `changeit`.

#### Step 3: Configure SQL Developer to Use TCPS (SSL)
Once the certificate is imported, you can configure SQL Developer to use SSL by setting up the connection string.

1. **Open SQL Developer** and go to the **Connections** panel.
2. **Create a new connection** or edit an existing one.
3. In the **Advanced tab** of the connection, use a JDBC URL similar to the following:

   ```text
   jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=your-db-hostname)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=your_service_name)))
   ```

   - **PROTOCOL**: `tcps` (indicating SSL).
   - **PORT**: Use the SSL/TLS port, typically `2484`.
   - **SERVICE_NAME**: The service name of the database.

4. Click **Test** to verify the connection.

---

Let me know if you need more specific steps based on your environment!